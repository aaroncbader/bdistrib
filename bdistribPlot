#!/usr/bin/env python

print "usage: bdistribPlot bdistrib_out.XXX.nc"

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import numpy as np
from scipy.io import netcdf
import sys
import math

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the bdistrib_out.XXX.nc file."
    exit(1)


f = netcdf.netcdf_file(sys.argv[1],'r',mmap=False)
nu_plasma = f.variables['nu_plasma'][()]
nvl_plasma = f.variables['nvl_plasma'][()]
nvl_middle = f.variables['nvl_middle'][()]
nvl_current = f.variables['nvl_current'][()]
u_plasma = f.variables['u_plasma'][()]
vl_plasma = f.variables['vl_plasma'][()]
r_plasma  = f.variables['r_plasma'][()]
r_middle  = f.variables['r_middle'][()]
r_current = f.variables['r_current'][()]

print "nu_plasma: ",nu_plasma
print "nvl_plasma: ",nvl_plasma
print "r_plasma.shape: ",r_plasma.shape

f.close()

#exit(0)

########################################################
# For 3D plotting, 'close' the arrays in u and v
########################################################

r_plasma  = np.append(r_plasma,  r_plasma[:,[0],:], axis=1)
r_plasma  = np.append(r_plasma,  r_plasma[:,:,[0]], axis=2)

r_middle  = np.append(r_middle,  r_middle[:,[0],:], axis=1)
r_middle  = np.append(r_middle,  r_middle[:,:,[0]], axis=2)

r_current = np.append(r_current, r_current[:,[0],:], axis=1)
r_current = np.append(r_current, r_current[:,:,[0]], axis=2)

########################################################
# Now make plot of surfaces at given toroidal angle
########################################################

fig = plt.figure(4)
fig.patch.set_facecolor('white')
iv = 0
plt.plot( r_plasma[0,iv,:],  r_plasma[2,iv,:], 'r.-', label='plasma')
plt.plot( r_middle[0,iv,:],  r_middle[2,iv,:], 'm.-', label='middle')
plt.plot(r_current[0,iv,:], r_current[2,iv,:], 'b.-', label='current')
plt.gca().set_aspect('equal',adjustable='box')
plt.legend(fontsize='x-small')
plt.title('v=0')

########################################################
# Now make 3D surface plot
########################################################

fig = plt.figure(1)
fig.patch.set_facecolor('white')
ax = fig.gca(projection='3d')
ax.plot_surface(r_plasma[0,:,:], r_plasma[1,:,:], r_plasma[2,:,:], rstride=1, cstride=1, color='r',linewidth=0)
#ax.plot_surface(r_plasma[0,:,:], r_plasma[1,:,:], r_plasma[2,:,:], rstride=1, cstride=1, color='r',linewidth=0,antialiased=False)
#plotLMax = r_plasma.max()

maxIndex = int(nvl_middle*0.7)
ax.plot_surface(r_middle[0,:maxIndex,:], r_middle[1,:maxIndex,:], r_middle[2,:maxIndex,:], rstride=1, cstride=1, color='m',linewidth=0)
#ax.plot_surface(r_middle[0,:maxIndex,:], r_middle[1,:maxIndex,:], r_middle[2,:maxIndex,:], rstride=1, cstride=1, color='m',linewidth=0,antialiased=False)

maxIndex = int(nvl_current*0.55)
minIndex = int(nvl_current*0.15)
ax.plot_surface(r_current[0,minIndex:maxIndex,:], r_current[1,minIndex:maxIndex,:], r_current[2,minIndex:maxIndex,:], rstride=1, cstride=1, color='b',linewidth=0)
#ax.plot_surface(r_current[0,minIndex:maxIndex,:], r_current[1,minIndex:maxIndex,:], r_current[2,minIndex:maxIndex,:], rstride=1, cstride=1, color='b',linewidth=0,antialiased=False)

plotLMax = r_current.max()
ax.auto_scale_xyz([-plotLMax, plotLMax], [-plotLMax, plotLMax], [-plotLMax, plotLMax])
#plt.title('Plasma surface')

#fig = plt.figure(2)
#fig.patch.set_facecolor('white')
#ax = fig.gca(projection='3d')
#ax.plot_surface(r_middle[0,:,:], r_middle[1,:,:], r_middle[2,:,:], rstride=1, cstride=1, color='m',linewidth=0,antialiased=False)
#plotLMax = r_middle.max()
#ax.auto_scale_xyz([-plotLMax, plotLMax], [-plotLMax, plotLMax], [-plotLMax, plotLMax])
#plt.title('Middle surface')

#fig = plt.figure(3)
#fig.patch.set_facecolor('white')
#ax = fig.gca(projection='3d')
#ax.plot_surface(r_current[0,:,:], r_current[1,:,:], r_current[2,:,:], rstride=1, cstride=1, color='b',linewidth=0,antialiased=False)
#plotLMax = r_current.max()
#ax.auto_scale_xyz([-plotLMax, plotLMax], [-plotLMax, plotLMax], [-plotLMax, plotLMax])
#plt.title('Current surface')


plt.show()

